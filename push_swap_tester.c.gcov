        -:    0:Source:./unit_test/src/push_swap_tester.c
        -:    0:Graph:push_swap_tester.gcno
        -:    0:Data:push_swap_tester.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* ************************************************************************** */
        -:    2:/*                                                                            */
        -:    3:/*                                                    .--.  _                 */
        -:    4:/*   push_swap_tester.c                                 :+:      :+:    :+:   */
        -:    5:/*                                                   |:_/ || |_ _   ___  __   */
        -:    6:/*   By: safoh <safoh@student.codam.nl>             //   \ \ __| | | \ \/ /   */
        -:    7:/*                                                 (|     | )|_| |_| |>  <    */
        -:    8:/*   Created: 2022/03/09 20:05:09 by safoh        /'\_   _/`\__|\__,_/_/\_\   */
        -:    9:/*   Updated: 2022/06/11 21:15:15 by safoh            ###   ########.fr       */
        -:   10:/*                                                                            */
        -:   11:/* ************************************************************************** */
        -:   12:
        -:   13:#include "unit_push_swap.h"
        -:   14:#include "push_swap.h"
        -:   15:#include "libft.h"
        -:   16:#include <criterion/criterion.h>
        -:   17:#include <criterion/new/assert.h>
        -:   18:#include <criterion/internal/assert.h>
        -:   19:#include <criterion/logging.h>
        -:   20:#include <string.h>
        -:   21:
        -:   22:/* ************************************************************************** */
        -:   23:TestSuite(check_argc, .init=redirect_all_std);
        -:   24:/* ************************************************************************** */
        2:   25:Test(check_argc, possible_stac_)
        -:   26:{
        1:   27:	check_argc_test(1, false, "");
        1:   28:}
        2:   29:Test(check_argc, possible_stack_sizes)
        -:   30:{
        1:   31:	check_argc_test(1, true, "");
        1:   32:	check_argc_test(2, false, "Error\n");
        1:   33:	check_argc_test(3, true, "");
        1:   34:}
        -:   35:
        2:   36:Test(check_argc, possible_stack_)
        -:   37:{
        1:   38:	check_argc_test(3, true, "");
        1:   39:}
        -:   40:
        -:   41:/* ************************************************************************** */
        -:   42:/*TestSuite(check_argv, .init=redirect_all_std);*/
        -:   43:/* ************************************************************************** */
        -:   44:
        -:   45:/*Test(check_argv, NULL_pointer)*/
        -:   46:/*{*/
        -:   47:	/*check_argv_test(0, NULL, false, "");*/
        -:   48:/*}*/
        -:   49:
        -:   50:/*Test(check_argv, one_number)*/
        -:   51:/*{*/
        -:   52:	/*char *string[] = {"1", NULL};*/
        -:   53:	/*cr_assert(var_check(1, string) == true);*/
        -:   54:	/*cr_assert_stderr_eq_str("");*/
        -:   55:/*}*/
        -:   56:
        -:   57:/*Test(check_argv, one_char)*/
        -:   58:/*{*/
        -:   59:	/*char *string[] = {"a", NULL};*/
        -:   60:	/*cr_assert(var_check(1, string) == false);*/
        -:   61:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:   62:/*}*/
        -:   63:
        -:   64:/*Test(check_argv, two_numbers_sorted)*/
        -:   65:/*{*/
        -:   66:	/*char *string[] = {"1", "2", NULL};*/
        -:   67:	/*cr_assert(var_check(2, string) == true);*/
        -:   68:	/*cr_assert_stderr_eq_str("");*/
        -:   69:/*}*/
        -:   70:
        -:   71:/*Test(check_argv, two_numbers_unsorted)*/
        -:   72:/*{*/
        -:   73:	/*char *string[] = {"2", "1", NULL};*/
        -:   74:	/*cr_assert(var_check(2, string) == true);*/
        -:   75:	/*cr_assert_stderr_eq_str("");*/
        -:   76:/*}*/
        -:   77:
        -:   78:/*Test(check_argv, invalid_char)*/
        -:   79:/*{*/
        -:   80:	/*char *string[] = {"a", "1", NULL};*/
        -:   81:	/*cr_assert(var_check(2, string) == false);*/
        -:   82:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:   83:/*}*/
        -:   84:
        -:   85:/*Test(check_argv, invalid_char_second_arg)*/
        -:   86:/*{*/
        -:   87:	/*char *string[] = {"1", "a", NULL};*/
        -:   88:	/*cr_assert(var_check(2, string) == false);*/
        -:   89:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:   90:/*}*/
        -:   91:
        -:   92:/*Test(check_argv, invalid_char_second_position)*/
        -:   93:/*{*/
        -:   94:	/*char *string[] = {"1a", "1", NULL};*/
        -:   95:	/*cr_assert(var_check(2, string) == false);*/
        -:   96:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:   97:/*}*/
        -:   98:/*Test(check_argv, invalid_char_random_position)*/
        -:   99:/*{*/
        -:  100:	/*char *string[] = {"a1", "1234a", NULL};*/
        -:  101:	/*cr_assert(var_check(2, string) == false);*/
        -:  102:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  103:/*}*/
        -:  104:
        -:  105:/*Test(check_argv, invalid_char_nl)*/
        -:  106:/*{*/
        -:  107:	/*char *string[] = {"\n", "2", NULL};*/
        -:  108:	/*cr_assert(var_check(2, string) == false);*/
        -:  109:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  110:/*}*/
        -:  111:
        -:  112:/*Test(check_argv, invalid_char_specialchar)*/
        -:  113:/*{*/
        -:  114:	/*char *string[] = {"1", "-", NULL};*/
        -:  115:	/*cr_assert(var_check(2, string) == true);*/
        -:  116:	/*cr_assert_stderr_eq_str("");*/
        -:  117:/*}*/
        -:  118:
        -:  119:/*Test(check_argv, invalid_char_tab)*/
        -:  120:/*{*/
        -:  121:	/*char *string[] = {"1", "\t", NULL};*/
        -:  122:	/*cr_assert(var_check(2, string) == false);*/
        -:  123:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  124:/*}*/
        -:  125:
        -:  126:/*Test(check_argv, invalid_nullterminator)*/
        -:  127:/*{*/
        -:  128:	/*char *string[] = {"4", "\0", "3", NULL};*/
        -:  129:	/*cr_assert(var_check(3, string) == true);*/
        -:  130:	/*cr_assert_stderr_eq_str("");*/
        -:  131:/*}*/
        -:  132:
        -:  133:/*Test(check_argv, invalid_nullterminator_check)*/
        -:  134:/*{*/
        -:  135:	/*char *string[] = {"4", "0", "3", NULL};*/
        -:  136:	/*cr_assert(var_check(3, string) == true);*/
        -:  137:	/*cr_assert_stderr_eq_str("");*/
        -:  138:/*}*/
        -:  139:
        -:  140:/*Test(check_argv, invalid_3x_nullterminator)*/
        -:  141:/*{*/
        -:  142:	/*char *string[] = {"\\0", "2", "\0", NULL};*/
        -:  143:	/*cr_assert(var_check(3, string) == false);*/
        -:  144:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  145:/*}*/
        -:  146:
        -:  147:/*Test(check_argv, invalid_nullterminator_afternum)*/
        -:  148:/*{*/
        -:  149:	/*char *string[] = {"4", "1\0", "0", NULL};*/
        -:  150:	/*cr_assert(var_check(3, string) == true);*/
        -:  151:	/*cr_assert_stderr_eq_str("");*/
        -:  152:/*}*/
        -:  153:
        -:  154:/*Test(check_argv, atoi_v1)*/
        -:  155:/*{*/
        -:  156:	/*char *string[] = {"004", NULL};*/
        -:  157:	/*cr_assert(var_check(1, string) == true);*/
        -:  158:	/*cr_assert_stderr_eq_str("");*/
        -:  159:/*}*/
        -:  160:
        -:  161:/*Test(check_argv, atoi_v2)*/
        -:  162:/*{*/
        -:  163:	/*char *string[] = {"+4", NULL};*/
        -:  164:	/*cr_assert(var_check(1, string) == true);*/
        -:  165:	/*cr_assert_stderr_eq_str("");*/
        -:  166:/*}*/
        -:  167:
        -:  168:/*Test(check_argv, atoi_v3)*/
        -:  169:/*{*/
        -:  170:	/*char *string[] = {"-4", NULL};*/
        -:  171:	/*cr_assert(var_check(1, string) == true);*/
        -:  172:	/*cr_assert_stderr_eq_str("");*/
        -:  173:/*}*/
        -:  174:
        -:  175:/*Test(check_argv, atoi_v4)*/
        -:  176:/*{*/
        -:  177:	/*char *string[] = {"-4", NULL};*/
        -:  178:	/*cr_assert(var_check(1, string) == true);*/
        -:  179:	/*cr_assert_stderr_eq_str("");*/
        -:  180:/*}*/
        -:  181:
        -:  182:/*Test(check_argv, atoi_v5)*/
        -:  183:/*{*/
        -:  184:	/*char *string[] = {"4-", NULL};*/
        -:  185:	/*cr_assert(var_check(1, string) == true);*/
        -:  186:	/*cr_assert_stderr_eq_str("");*/
        -:  187:/*}*/
        -:  188:
        -:  189:/*Test(check_argv, atoi_v6)*/
        -:  190:/*{*/
        -:  191:	/*char *string[] = {"4+", NULL};*/
        -:  192:	/*cr_assert(var_check(1, string) == true);*/
        -:  193:	/*cr_assert_stderr_eq_str("");*/
        -:  194:/*}*/
        -:  195:
        -:  196:/*Test(check_argv, atoi_v7)*/
        -:  197:/*{*/
        -:  198:	/*char *string[] = {"000-4+", NULL};*/
        -:  199:	/*cr_assert(var_check(1, string) == true);*/
        -:  200:	/*cr_assert_stderr_eq_str("");*/
        -:  201:/*}*/
        -:  202:
        -:  203:/*[> ************************************************************************** <]*/
        -:  204:/*TestSuite(argvtoarray, .init=redirect_stdout_to_stderr);*/
        -:  205:/*[> ************************************************************************** <]*/
        -:  206:
        -:  207:/*bool	setup_argvtoarray(char **argv)*/
        -:  208:/*{*/
        -:  209:	/*int	len;*/
        -:  210:	/*int i;*/
        -:  211:	/*int	*integer = NULL;*/
        -:  212:	/*long	*expected = NULL;*/
        -:  213:
        -:  214:	/*len = 0;*/
        -:  215:	/*i = 0;*/
        -:  216:	/*if (argv)*/
        -:  217:		/*while (argv[len])*/
        -:  218:			/*len++;*/
        -:  219:	/*expected = calloc(len + 1, sizeof(long));*/
        -:  220:	/*integer = argvtoarray(len, argv);*/
        -:  221:	/*if((!integer || !expected) && argv)*/
        -:  222:	/*{*/
        -:  223:		/*free(expected);*/
        -:  224:		/*free(integer);*/
        -:  225:		/*return (false);*/
        -:  226:	/*}*/
        -:  227:	/*if(integer && !argv)*/
        -:  228:	/*{*/
        -:  229:		/*free(expected);*/
        -:  230:		/*free(integer);*/
        -:  231:		/*[>cr_log_warn("Integer should be freed\n");<]*/
        -:  232:		/*return (false);*/
        -:  233:	/*}*/
        -:  234:	/*while (i < len)*/
        -:  235:	/*{*/
        -:  236:
        -:  237:		/*expected[i] = atol(argv[i]);*/
        -:  238:		/*if (expected[i] != integer[i])*/
        -:  239:			/*return (false);*/
        -:  240:		/*i++;*/
        -:  241:	/*}*/
        -:  242:	/*free(expected);*/
        -:  243:	/*free(integer);*/
        -:  244:	/*return (true);*/
        -:  245:/*}*/
        -:  246:
        -:  247:/*Test(argvtoarray, NULL_value)*/
        -:  248:/*{*/
        -:  249:
        -:  250:	/*cr_assert(setup_argvtoarray(NULL) == true);*/
        -:  251:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  252:/*}*/
        -:  253:
        -:  254:/*Test(argvtoarray, zero_v1)*/
        -:  255:/*{*/
        -:  256:	/*char	*string[] = {"0", NULL};*/
        -:  257:
        -:  258:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  259:	/*cr_assert_stderr_eq_str("");*/
        -:  260:/*}*/
        -:  261:
        -:  262:/*Test(argvtoarray, zero_v2)*/
        -:  263:/*{*/
        -:  264:	/*char	*string[] = {"-00000", NULL};*/
        -:  265:
        -:  266:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  267:	/*cr_assert_stderr_eq_str("");*/
        -:  268:/*}*/
        -:  269:
        -:  270:/*Test(argvtoarray, zero_v3)*/
        -:  271:/*{*/
        -:  272:	/*char	*string[] = {"+00000", NULL};*/
        -:  273:
        -:  274:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  275:	/*cr_assert_stderr_eq_str("");*/
        -:  276:/*}*/
        -:  277:
        -:  278:/*Test(argvtoarray, zero_v4)*/
        -:  279:/*{*/
        -:  280:	/*char	*string[] = {"+000010", NULL};*/
        -:  281:
        -:  282:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  283:	/*cr_assert_stderr_eq_str("");*/
        -:  284:/*}*/
        -:  285:
        -:  286:/*Test(argvtoarray, extra_padding_only_one)*/
        -:  287:/*{*/
        -:  288:	/*char	*string[] = {"0001", NULL};*/
        -:  289:
        -:  290:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  291:	/*cr_assert_stderr_eq_str("");*/
        -:  292:/*}*/
        -:  293:
        -:  294:/*Test(argvtoarray, extra_padding_only_one_min)*/
        -:  295:/*{*/
        -:  296:	/*char	*string[] = {"0001", NULL};*/
        -:  297:
        -:  298:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  299:	/*cr_assert_stderr_eq_str("");*/
        -:  300:/*}*/
        -:  301:
        -:  302:/*Test(argvtoarray, MAX)*/
        -:  303:/*{*/
        -:  304:	/*char	*string[] = {"2147483647", NULL};*/
        -:  305:
        -:  306:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  307:	/*cr_assert_stderr_eq_str("");*/
        -:  308:/*}*/
        -:  309:
        -:  310:/*Test(argvtoarray, MAX_plusone)*/
        -:  311:/*{*/
        -:  312:	/*char	*string[] = {"2147483648", NULL};*/
        -:  313:
        -:  314:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  315:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  316:/*}*/
        -:  317:
        -:  318:/*Test(argvtoarray, MAX_plusone_pluspad)*/
        -:  319:/*{*/
        -:  320:	/*char	*string[] = {"+2147483648", NULL};*/
        -:  321:
        -:  322:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  323:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  324:/*}*/
        -:  325:/*Test(argvtoarray, MIN)*/
        -:  326:/*{*/
        -:  327:	/*char	*string[] = {"-2147483648", NULL};*/
        -:  328:
        -:  329:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  330:	/*cr_assert_stderr_eq_str("");*/
        -:  331:/*}*/
        -:  332:
        -:  333:/*Test(argvtoarray, MIN_minpluspadding_v1)*/
        -:  334:/*{*/
        -:  335:	/*char	*string[] = {"-+-2147483648", NULL};*/
        -:  336:
        -:  337:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  338:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  339:/*}*/
        -:  340:
        -:  341:/*Test(argvtoarray, MIN_minpluspadding_v2)*/
        -:  342:/*{*/
        -:  343:	/*char	*string[] = {"-+2147483648", NULL};*/
        -:  344:
        -:  345:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  346:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  347:/*}*/
        -:  348:
        -:  349:/*Test(argvtoarray, MIN_minpluspadding_v3)*/
        -:  350:/*{*/
        -:  351:	/*char	*string[] = {"+-2147483648", NULL};*/
        -:  352:
        -:  353:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  354:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  355:/*}*/
        -:  356:
        -:  357:/*Test(argvtoarray, MIN_minpluspadding_v4)*/
        -:  358:/*{*/
        -:  359:	/*char	*string[] = {"--2147483648", NULL};*/
        -:  360:
        -:  361:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  362:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  363:/*}*/
        -:  364:
        -:  365:/*Test(argvtoarray, MIN_minpluspadding_v5)*/
        -:  366:/*{*/
        -:  367:	/*char	*string[] = {"++2147483648", NULL};*/
        -:  368:
        -:  369:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  370:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  371:/*}*/
        -:  372:
        -:  373:/*Test(argvtoarray, MIN_minpluspadding_v6)*/
        -:  374:/*{*/
        -:  375:	/*char	*string[] = {"0+2147483648", NULL};*/
        -:  376:
        -:  377:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  378:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  379:/*}*/
        -:  380:
        -:  381:/*Test(argvtoarray, MIN_minone)*/
        -:  382:/*{*/
        -:  383:	/*char	*string[] = {"-2147483649", NULL};*/
        -:  384:
        -:  385:	/*cr_assert(setup_argvtoarray(string) == false);*/
        -:  386:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  387:/*}*/
        -:  388:
        -:  389:/*Test(argvtoarray, extra_padding_MIN)*/
        -:  390:/*{*/
        -:  391:	/*char	*string[] = {"-002147483648", NULL};*/
        -:  392:
        -:  393:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  394:	/*cr_assert_stderr_eq_str("");*/
        -:  395:/*}*/
        -:  396:
        -:  397:/*Test(argvtoarray, extra_padding_MAX)*/
        -:  398:/*{*/
        -:  399:	/*char	*string[] = {"002147483647", NULL};*/
        -:  400:
        -:  401:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  402:	/*cr_assert_stderr_eq_str("");*/
        -:  403:/*}*/
        -:  404:
        -:  405:/*Test(argvtoarray, multiple_arguments_v1)*/
        -:  406:/*{*/
        -:  407:	/*char	*string[] = {"0001", "298347", NULL};*/
        -:  408:
        -:  409:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  410:	/*cr_assert_stderr_eq_str("");*/
        -:  411:/*}*/
        -:  412:
        -:  413:/*Test(argvtoarray, multiple_arguments_v2)*/
        -:  414:/*{*/
        -:  415:	/*char	*string[] = {"0001", "298347", "-12304987", NULL};*/
        -:  416:
        -:  417:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  418:	/*cr_assert_stderr_eq_str("");*/
        -:  419:/*}*/
        -:  420:
        -:  421:/*Test(argvtoarray, multiple_arguments_v3)*/
        -:  422:/*{*/
        -:  423:	/*char	*string[] = {"0001", "298347", "-12304987", "0", NULL};*/
        -:  424:
        -:  425:	/*cr_assert(setup_argvtoarray(string) == true);*/
        -:  426:	/*cr_assert_stderr_eq_str("");*/
        -:  427:/*}*/
        -:  428:/*[>Is the list already sorted and does it contain double numbers<]*/
        -:  429:/*[> ************************************************************************** <]*/
        -:  430:/*TestSuite(array_check, .init=redirect_stdout_to_stderr);*/
        -:  431:/*[> ************************************************************************** <]*/
        -:  432:
        -:  433:/*bool	test_array_check(int *expected)*/
        -:  434:/*{*/
        -:  435:	/*int len;*/
        -:  436:
        -:  437:	/*len = 0;*/
        -:  438:	/*if (expected)*/
        -:  439:		/*while (expected[len])*/
        -:  440:			/*len++;*/
        -:  441:	/*if (array_check(len, expected) == false)*/
        -:  442:		/*return (false);*/
        -:  443:	/*return (true);*/
        -:  444:/*}*/
        -:  445:
        -:  446:/*Test(array_check, NULL_values)*/
        -:  447:/*{*/
        -:  448:	/*cr_assert(test_array_check(NULL) == false);*/
        -:  449:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  450:/*}*/
        -:  451:
        -:  452:/*Test(array_check, one_nemb_sorted)*/
        -:  453:/*{*/
        -:  454:	/*int	expected[] = {1, 2, '\0'};*/
        -:  455:	/*cr_assert(test_array_check(expected) == false);*/
        -:  456:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  457:/*}*/
        -:  458:
        -:  459:/*Test(array_check, two_nemb_unsorted)*/
        -:  460:/*{*/
        -:  461:	/*int	expected[] = {2, 1, '\0'};*/
        -:  462:	/*cr_assert(test_array_check(expected) == true);*/
        -:  463:/*}*/
        -:  464:
        -:  465:/*Test(array_check, two_nemb_double)*/
        -:  466:/*{*/
        -:  467:	/*int	expected[] = {2, 2, '\0'};*/
        -:  468:	/*cr_assert(test_array_check(expected) == false);*/
        -:  469:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  470:/*}*/
        -:  471:
        -:  472:/*Test(array_check, three_nemb_double_middle)*/
        -:  473:/*{*/
        -:  474:	/*int	expected[] = {2, 3, 2, '\0'};*/
        -:  475:	/*cr_assert(test_array_check(expected) == false);*/
        -:  476:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  477:/*}*/
        -:  478:
        -:  479:/*Test(array_check, three_nemb_double_back)*/
        -:  480:/*{*/
        -:  481:	/*int	expected[] = {3, 2, 2, '\0'};*/
        -:  482:	/*cr_assert(test_array_check(expected) == false);*/
        -:  483:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  484:/*}*/
        -:  485:
        -:  486:/*Test(array_check, three_nemb_double_front)*/
        -:  487:/*{*/
        -:  488:	/*int	expected[] = {2, 2, 3, '\0'};*/
        -:  489:	/*cr_assert(test_array_check(expected) == false);*/
        -:  490:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  491:/*}*/
        -:  492:
        -:  493:
        -:  494:/*[> ************************************************************************** <]*/
        -:  495:/*TestSuite(init_stack, .init=redirect_stdout_to_stderr);*/
        -:  496:/*[> ************************************************************************** <]*/
        -:  497:/*bool	test_init_stack(int *expected)*/
        -:  498:/*{*/
        -:  499:	/*t_list	*stack_a = NULL;*/
        -:  500:	/*int number;*/
        -:  501:	/*int len = 0;*/
        -:  502:	/*size_t i = 0;*/
        -:  503:
        -:  504:	/*if (expected)*/
        -:  505:		/*while (expected[len])*/
        -:  506:			/*len++;*/
        -:  507:	/*stack_a = init_stack(len, expected, stack_a);*/
        -:  508:	/*if (stack_a == NULL)*/
        -:  509:	/*{*/
        -:  510:		/*if (expected)*/
        -:  511:			/*cr_log_error("Stack_init_setup failed\n");*/
        -:  512:		/*return (false);*/
        -:  513:	/*}*/
        -:  514:	/*while(i < (size_t)len)*/
        -:  515:	/*{*/
        -:  516:		/*number = *(int *)stack_a->content;*/
        -:  517:		/*if(number != expected[i])*/
        -:  518:			/*return (false);*/
        -:  519:		/*stack_a = stack_a->next;*/
        -:  520:		/*i++;*/
        -:  521:	/*}*/
        -:  522:	/*ft_lstclear(&stack_a, NULL);*/
        -:  523:	/*return (true);*/
        -:  524:/*}*/
        -:  525:
        -:  526:/*Test(init_stack, null_pointer)*/
        -:  527:/*{*/
        -:  528:	/*int *expected = NULL;*/
        -:  529:	
        -:  530:	/*cr_assert(test_init_stack(expected) == false);*/
        -:  531:	/*cr_assert_stderr_eq_str("Error\n");*/
        -:  532:/*}*/
        -:  533:
        -:  534:/*Test(init_stack, one_valid_int)*/
        -:  535:/*{*/
        -:  536:	/*int	expected[] = {1, '\0'};*/
        -:  537:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  538:	/*cr_assert_stderr_eq_str("");*/
        -:  539:/*}*/
        -:  540:
        -:  541:/*Test(init_stack, MAX_int)*/
        -:  542:/*{*/
        -:  543:	/*int	expected[] = {2147483647, '\0'};*/
        -:  544:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  545:	/*cr_assert_stderr_eq_str("");*/
        -:  546:/*}*/
        -:  547:
        -:  548:/*Test(init_stack, double_MAXMAX_int)*/
        -:  549:/*{*/
        -:  550:	/*int	expected[] = {2147483647, -2147483648, '\0'};*/
        -:  551:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  552:	/*cr_assert_stderr_eq_str("");*/
        -:  553:/*}*/
        -:  554:
        -:  555:/*Test(init_stack, double_MAX_int)*/
        -:  556:/*{*/
        -:  557:	/*int	expected[] = {2147483647, 2147483647, '\0'};*/
        -:  558:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  559:	/*cr_assert_stderr_eq_str("");*/
        -:  560:/*}*/
        -:  561:
        -:  562:/*Test(init_stack, MIN_int)*/
        -:  563:/*{*/
        -:  564:	/*int	expected[] = {-2147483648, '\0'};*/
        -:  565:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  566:	/*cr_assert_stderr_eq_str("");*/
        -:  567:/*}*/
        -:  568:
        -:  569:/*Test(init_stack, two_valid_int)*/
        -:  570:/*{*/
        -:  571:	/*int	expected[] = {1, 2, '\0'};*/
        -:  572:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  573:	/*cr_assert_stderr_eq_str("");*/
        -:  574:/*}*/
        -:  575:
        -:  576:/*Test(init_stack, three_valid_int)*/
        -:  577:/*{*/
        -:  578:	/*int	expected[] = {1, 2, 3, '\0'};*/
        -:  579:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  580:	/*cr_assert_stderr_eq_str("");*/
        -:  581:/*}*/
        -:  582:
        -:  583:/*Test(init_stack, three_valid_negint)*/
        -:  584:/*{*/
        -:  585:	/*int	expected[] = {-1, -2, -3, '\0'};*/
        -:  586:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  587:	/*cr_assert_stderr_eq_str("");*/
        -:  588:/*}*/
        -:  589:
        -:  590:/*Test(init_stack, rev_three_valid_negint)*/
        -:  591:/*{*/
        -:  592:	/*int	expected[] = {-3, -2, -1, '\0'};*/
        -:  593:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  594:	/*cr_assert_stderr_eq_str("");*/
        -:  595:/*}*/
        -:  596:
        -:  597:/*Test(init_stack, 0_three_valid_negint)*/
        -:  598:/*{*/
        -:  599:	/*int	expected[] = {-3, 0, -1, '\0'};*/
        -:  600:	/*cr_assert(test_init_stack(expected) == true);*/
        -:  601:	/*cr_assert_stderr_eq_str("");*/
        -:  602:/*}*/
        -:  603:/*[> ************************************************************************** <]*/
        -:  604:/*TestSuite(sa, .init=redirect_stdout_to_stderr);*/
        -:  605:/*[> ************************************************************************** <]*/
        -:  606:
        -:  607:/*t_list*	setup_stack_a(const int* initial, size_t initial_len)*/
        -:  608:/*{*/
        -:  609:	/*t_list *stack_a = NULL;*/
        -:  610:	/*cr_assert(initial != NULL);*/
        -:  611:	/*stack_a = init_stack(initial_len, initial, stack_a);*/
        -:  612:	/*cr_assert(stack_a != NULL);*/
        -:  613:	/*return stack_a;*/
        -:  614:/*}*/
        -:  615:
        -:  616:/*void	destroy_stack_a(t_list* stack_a)*/
        -:  617:/*{*/
        -:  618:	/*ft_lstclear(&stack_a, NULL);*/
        -:  619:/*}*/
        -:  620:
        -:  621:/*bool	compare_stack_against_array(t_list* stack_a, const int *expected, size_t expected_len)*/
        -:  622:/*{*/
        -:  623:	/*size_t i = 0;*/
        -:  624:	/*int number;*/
        -:  625:	/*while(i < expected_len)*/
        -:  626:	/*{*/
        -:  627:		/*number = *(int *)stack_a->content;*/
        -:  628:		/*if(number != expected[i])*/
        -:  629:			/*return false;*/
        -:  630:		/*stack_a = stack_a->next;*/
        -:  631:		/*i++;*/
        -:  632:	/*}*/
        -:  633:	/*return true;*/
        -:  634:/*}*/
        -:  635:
        -:  636:/*Test(sa, basic_input)*/
        -:  637:/*{*/
        -:  638:	/*const int initial[] = {1, 2};*/
        -:  639:	/*const int	expected[] = {2, 1};*/
        -:  640:
        -:  641:	/*const size_t initial_len = sizeof(initial) / sizeof(*initial);*/
        -:  642:	/*const size_t expected_len = sizeof(expected) / sizeof(*expected);*/
        -:  643:
        -:  644:	/*t_list* stack_a = setup_stack_a(initial, initial_len);*/
        -:  645:	/*sa(stack_a);*/
        -:  646:
        -:  647:	/*bool result = compare_stack_against_array(stack_a, expected, expected_len);*/
        -:  648:	/*destroy_stack_a(stack_a);*/
        -:  649:
        -:  650:	/*cr_expect(result == true);*/
        -:  651:	/*cr_expect_stdout_eq_str("sa\n");*/
        -:  652:/*}*/
